name: 🏷️ PR Auto Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  label:
    name: 🏷️ Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Analyze PR Changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          docs:
            - '**.md'
            - 'docs/**'
          core:
            - 'hddu/complete_workflow.py'
            - 'hddu/interpreter.py'
            - 'hddu/parser.py'
          ai:
            - 'hddu/interpreter.py'
            - 'hddu/translate.py'
            - 'hddu/convert_*.py'
          assembly:
            - 'hddu/assembly/**'
          tests:
            - 'test_*.py'
            - 'tests/**'
          config:
            - 'hddu/config.py'
            - 'pyproject.toml'
            - '.env*'
          ci:
            - '.github/**'
          
    - name: 🏷️ Add Size Labels
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;
          
          let sizeLabel = '';
          if (changes < 10) sizeLabel = 'size/XS';
          else if (changes < 30) sizeLabel = 'size/S';
          else if (changes < 100) sizeLabel = 'size/M';
          else if (changes < 500) sizeLabel = 'size/L';
          else sizeLabel = 'size/XL';
          
          // Add size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [sizeLabel]
          });
          
    - name: 🏷️ Add Component Labels
      uses: actions/github-script@v7
      with:
        script: |
          const labels = [];
          
          // Component-based labels
          if ('${{ steps.changes.outputs.docs }}' === 'true') {
            labels.push('component/documentation');
          }
          if ('${{ steps.changes.outputs.core }}' === 'true') {
            labels.push('component/core');
          }
          if ('${{ steps.changes.outputs.ai }}' === 'true') {
            labels.push('component/ai');
          }
          if ('${{ steps.changes.outputs.assembly }}' === 'true') {
            labels.push('component/assembly');
          }
          if ('${{ steps.changes.outputs.tests }}' === 'true') {
            labels.push('component/tests');
          }
          if ('${{ steps.changes.outputs.config }}' === 'true') {
            labels.push('component/config');
          }
          if ('${{ steps.changes.outputs.ci }}' === 'true') {
            labels.push('component/ci-cd');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
          
    - name: 🔄 Add Status Labels
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = [];
          
          // Status labels
          if (pr.draft) {
            labels.push('status/draft');
          } else {
            labels.push('status/ready-for-review');
          }
          
          // Priority inference
          if (pr.title.includes('fix') || pr.title.includes('bug')) {
            labels.push('priority/high');
            labels.push('type/bug');
          } else if (pr.title.includes('feat') || pr.title.includes('feature')) {
            labels.push('type/feature');
          } else if (pr.title.includes('docs') || pr.title.includes('doc')) {
            labels.push('type/documentation');
          } else if (pr.title.includes('test')) {
            labels.push('type/test');
          } else if (pr.title.includes('chore') || pr.title.includes('refactor')) {
            labels.push('type/maintenance');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
